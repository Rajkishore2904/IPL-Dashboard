# -*- coding: utf-8 -*-
"""Cricket Hackathon_cleaning and plotting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t8tOZ5uS75T15xJaPF2FAxlWfobCJ7mq

**Loading Libraries**
"""

!pip install dash

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from mpl_toolkits.mplot3d import Axes3D
import plotly.express as px
import pandas as pd
from dash import Dash, Input, Output, dcc, html

"""**Loading Data**"""

data_match = pd.read_csv("IPL_Matches_Result_2008_2022.csv") 
data_ball = pd.read_csv("IPL_Ball_by_Ball_2008_2022.csv")
final_data = pd.merge(data_match, data_ball, on = "ID", how = "inner")

data_match.head() # Match by match data

data_ball.head() # Ball by ball data

#Merged table by inner join based on match id
final_data.head()

data_size = final_data.shape
data_size

"""# Data Preprocessing

**Deleting foreign stadiums**
"""

stadiums_to_delete = ['Buffalo Park', 'Newlands','Dubai International Cricket Stadium', 'Sharjah Cricket Stadium','Zayed Cricket Stadium, Abu Dhabi','Sheikh Zayed Stadium','New Wanderers Stadium', 'SuperSport Park', 'Kingsmead','OUTsurance Oval', "St George's Park", 'De Beers Diamond Oval','Buffalo Park', 'Newlands','Green Park']
final_data = final_data[~final_data["Venue"].isin(stadiums_to_delete)]

"""**Deleting stadiums not used in 2023**"""

venue_to_delete = ["Vidarbha Cricket Association Stadium, Jamtha","Nehru Stadium","Barabati Stadium","Sardar Patel Stadium, Motera","Subrata Roy Sahara Stadium","JSCA International Stadium Complex","Shaheed Veer Narayan Singh International Stadium","Saurashtra Cricket Association Stadium","Holkar Cricket Stadium","Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium"]
final_data = final_data.drop(final_data.index[final_data["Venue"].isin(venue_to_delete)])

"""**Cleaning stadium names according to Test data**"""

final_data.replace({"Feroz Shah Kotla":"Arun Jaitley Stadium"},inplace = True)
final_data.replace({"Arun Jaitley Stadium, Delhi":"Arun Jaitley Stadium","Arun Jaitley Stadium, Delhi":"Arun Jaitley Stadium"},inplace = True)
final_data.replace({"MA Chidambaram Stadium, Chepauk, Chennai":"MA Chidambaram Stadium","MA Chidambaram Stadium, Chepauk":"MA Chidambaram Stadium"},inplace = True)
final_data.replace({"Rajiv Gandhi International Stadium, Uppal":"Rajiv Gandhi International Stadium"},inplace=True)
final_data.replace({"Punjab Cricket Association Stadium, Mohali":"Punjab Cricket Association IS Bindra Stadium","Punjab Cricket Association IS Bindra Stadium, Mohali":"Punjab Cricket Association IS Bindra Stadium"},inplace = True)
final_data.replace({"Narendra Modi Stadium, Ahmedabad":"Narendra Modi Stadium"},inplace = True)
final_data.replace({"M Chinnaswamy Stadium":"M.Chinnaswamy Stadium"},inplace = True)
final_data.replace({"Wankhede Stadium, Mumbai":"Wankhede Stadium"},inplace = True)
final_data.replace({"Dr DY Patil Sports Academy, Mumbai":"Dr DY Patil Sports Academy"},inplace = True)
final_data.replace({"Eden Gardens, Kolkata":"Eden Gardens"},inplace = True)
final_data.replace({"Brabourne Stadium, Mumbai":"Brabourne Stadium"},inplace = True)
final_data.replace({"Delhi Daredevils":"Delhi Capitals"},inplace =True)
final_data.replace({"Kings XI Punjab":"Punjab Kings"},inplace = True)
final_data.replace({"Deccan Chargers":"Sunrisers Hyderabad"},inplace = True)
final_data.replace({"Maharashtra Cricket Association Stadium, Pune":"Maharashtra Cricket Association Stadium"},inplace = True)

final_data["Venue"].unique()

"""**Teams to delete**"""

teams_to_delete = ["Rising Pune Supergiants","Pune Warriors","Kochi Tuskers Kerala","Rising Pune Supergiant"]
final_data = final_data[~final_data["Team1"].isin(teams_to_delete)] # Deleting from column Team 1
final_data = final_data[~final_data["Team2"].isin(teams_to_delete)]  # Deleting from column Team 2
final_data.replace({"Gujarat Lions":"Gujarat Titans"},inplace = True) # Renaming Team Gujarat

final_data["Team1"].unique()

final_data["Team2"].unique()

"""**Keeping only data of powerplay**"""

final_data = final_data[final_data["overs"] < 6]

final_data.shape

print(" Reduced Percentage of data",(data_size[0]- final_data.shape[0])/data_size[0])

"""**Creating a new column of Total sixes in each innings powerplay**"""

record = final_data[final_data["batsman_run"] == 6] # filtering data of only balls where 6 runs scored
six_count = pd.DataFrame(record.groupby(["ID","BattingTeam"])["batsman_run"].count().reset_index())
final_data = pd.merge(final_data,six_count,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batsman_run_x":"batsman_run","batsman_run_y":"six_count"},inplace = True) # creating new column six count of every innings

final_data[["ID","Team1","Team2","Venue","overs","ballnumber","six_count"]].head()

final_data.columns

"""**Season Data removing less than 2018**"""

final_data = final_data[final_data["Season"] != "2009/10"]
final_data = final_data[final_data["Season"] != "2007/08"]
final_data.replace({"2020/21":"2021"},inplace = True)
final_data["Season"] = pd.to_numeric(final_data["Season"])
final_data = final_data[final_data["Season"] >= 2018] # Deleting Matches before 2018

final_data.shape

"""# Exploratory Data Analysis

**Finding top 10 batsmen with highest no.of sixes in powerplay**
"""

final_data["batter"].unique()

freq_table = final_data.groupby(['batter', 'batsman_run']).size().reset_index(name='frequency')
freq_table.head(10) # frequency column gives each batsman different category of run frequency in powerplay

top_10 = freq_table[freq_table["batsman_run"] == 6].sort_values("frequency",ascending = False).head(10) # filter only 6 runs rows and frequency
ax = top_10.head(10).plot(kind='bar', x='batter', y='frequency', color='#86bf91', figsize=(12,6), legend=False, width=0.85)

ax.set_title("Frequency of 6 by Batsman", fontsize=18)
ax.set_xlabel("Batter Name", fontsize=14)
ax.set_ylabel("Frequency of 6s", fontsize=14)

for i, v in enumerate(top_10['frequency']):
    ax.text(i-0.15, v+0.5, str(v), fontsize=12, fontweight='bold')

ax.set_xticklabels(top_10.head(10)['batter'], rotation=45, ha='right', fontsize=12)
ax.yaxis.grid(color='gray', linestyle='dashed', alpha=0.4)

plt.show()

"""**Finding top 10 bowlers with highest no.of dot balls**"""

dot_ball = final_data.groupby(['bowler', 'batsman_run']).size().reset_index(name='frequency')
top_10 = dot_ball[dot_ball["batsman_run"] == 0].sort_values("frequency",ascending = False).head(10)
top_10 # frequency col gives no.of dot balls in six overs

!pip install squarify

import squarify
import matplotlib.pyplot as plt

# Set up the plot
fig, ax = plt.subplots(figsize=(10, 6))

# Define the colors for each category
colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f', '#bcbd22', '#17becf']

# Generate the treemap plot
squarify.plot(sizes=top_10["frequency"], label=[f"{b}\n{f}" for b, f in zip(top_10["bowler"], top_10["frequency"])], color=colors, alpha=.8, ax=ax)

# Add titles and labels
plt.title('Top 10 Bowlers with Max dot balls', fontsize=16)
plt.axis('off')
plt.show()

"""**Grouping Each Batsman with diff bowlers and scoring freq against them**"""

import pandas as pd

grouped = final_data.groupby(['batter', 'bowler', 'batsman_run'])

freq = grouped.size().reset_index(name='frequency')

freq = pd.DataFrame(freq)
freq.head(10) # Each batsman facing diff bowler and their frequency of scoring

freq.to_csv("batsman_bowler.csv",index= False)

import pandas as pd
import dash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output
import plotly.express as px

# Read the input CSV file
df = pd.read_csv('batsman_bowler.csv')

# Create an empty dictionary to store the aggregated data
data = {}

# Aggregate the data for each batter and bowler combination
for _, row in df.iterrows():
    batter = row['batter']
    bowler = row['bowler']
    runs = row['batsman_run']
    frequency = row['frequency']
    if batter not in data:
        data[batter] = {}
    if bowler not in data[batter]:
        data[batter][bowler] = {'runs': 0, 'frequency': 0}
    data[batter][bowler]['runs'] += runs
    data[batter][bowler]['frequency'] += frequency

# Create a Dash application
app = dash.Dash(__name__)

# Define the layout of the application
app.layout = html.Div([
    html.H1('Batsman Performance Dashboard'),
    html.Label('Select a batter:'),
    dcc.Dropdown(
        id='batter-dropdown',
        options=[{'label': batter, 'value': batter} for batter in data.keys()],
        value=list(data.keys())[0]
    ),
    dcc.Graph(id='performance-graph')
])

# Define the callback function to update the graph based on the selected batter
@app.callback(
    Output('performance-graph', 'figure'),
    Input('batter-dropdown', 'value')
)
def update_graph(batter):
    batter_data = data[batter]
    df = pd.DataFrame.from_dict(batter_data, orient='index').reset_index()
    df.columns = ['bowler', 'runs', 'frequency']
    
    fig = px.scatter(df, x='runs', y='frequency', color='bowler',
                     hover_data=['bowler', 'runs', 'frequency'],
                     labels={'runs': 'Batsman Run', 'frequency': 'Frequency'})
    
    fig.update_layout(
        xaxis_title='Batsman Run',
        yaxis_title='Frequency',
        title=f'Batsman Performance against Different Bowlers - {batter}'
    )
    
    return fig

# Run the application
if __name__ == '__main__':
    app.run_server(debug=True)

data = (
    pd.read_csv("batsman_bowler.csv")
)
external_stylesheets = [
    {
        "href": (
            "https://fonts.googleapis.com/css2?"
            "family=Lato:wght@400;700&display=swap"
        ),
        "rel": "stylesheet",
    },
]
batsman = data["batter"].sort_values().unique()

app = Dash(__name__,external_stylesheets=external_stylesheets)
app.title = "IPL Analytics"

app.layout = html.Div(
    children=[
        html.Div(
            children=[
                html.P(children="IPL", className="header-emoji"),
                html.H1(
                    children="IPL Analytics", className="header-title"
                ),
                html.P(
                    children=(
                        "Analyze the Performance of Batsman against different Bowlers"
                        " In Powerplay overs"
                    ),
                    className="header-description",
                ),
            ],
            className="header",
        ),
        html.Div(
            children=[
                html.Div(
                    children=[
                        html.Div(children="Batsman", className="menu-title"),
                        dcc.Dropdown(
                            id="region-filter",
                            options=[
                                {"label": batter, "value": batter}
                                for batter in batsman
                            ],
                            value="AB de Villiers",
                            clearable=False,
                            className="dropdown",
                        ),
                    ]
                ),
        html.Div(
            children=[
                html.Div(
                    children=dcc.Graph(
                        id="performance chart",
                        config={"displayModeBar": False},
                    ),
                    className="card",
                ),
                html.Div(
                    children=dcc.Graph(
                        id="volume-chart",
                        config={"displayModeBar": False},
                    ),
                    className="card",
                ),
            ],
            className="wrapper",
        ),
    ]
)

@app.callback(
    Output("performance-chart", "figure"),
    Input("batter-filter", "value"),
)
def update_charts(batter):
    filtered_data = data.query(
        "batter == @batter"
    )
    price_chart_figure = {
        "data": [
            {
                "x": filtered_data["batsman_run"],
                "y": filtered_data["frequency"],
                "type": "bar",
                "hovertemplate": "$%{y:.2f}<extra></extra>",
            },
        ],
        "layout": {
            "title": {
                "text": "Average Price of Avocados",
                "x": 0.05,
                "xanchor": "left",
            },
            "xaxis": {"fixedrange": True},
            "yaxis": {"tickprefix": "$", "fixedrange": True},
            "colorway": ["#17B897"],
        },
    }
    return price_chart_figure

if __name__ == "__main__":
    app.run_server(debug=True)

"""**AB Devilliers performance against diff bowlers in powerplay**"""

abd_stats = freq[freq["batter"] == "AB de Villiers"]
sns.catplot(x='batsman_run', y='frequency', hue='bowler', col='batter', kind='bar', data=abd_stats)
plt.show()

"""**JC Butler Performance against each bowlers**"""

butler_stats = freq[freq["batter"] == "JC Buttler"]
sns.catplot(x='batsman_run', y='frequency', hue='bowler', col='batter', kind='bar', data=butler_stats)
plt.show()

"""**Kohlis performance against different bowlers**"""

kohli_stats = freq[freq["batter"] == "V Kohli"]
sns.catplot(x='batsman_run', y='frequency', hue='bowler', col='batter', kind='bar', data=kohli_stats)
plt.show()

"""**Finding out bowlers who have bowled max dot balls to which batsman**"""

freq_0 = freq[freq["batsman_run"] == 0].sort_values("frequency",ascending = False)
freq_0.head(10)

"""**Plotting max dot balls by diff bowlers to diff batsman top 20**"""

freq_0_20 = freq_0.head(20)

fig = px.scatter_3d(freq_0_20, x=freq_0_20['batter'], y=freq_0_20['bowler'], z=freq_0_20['frequency'],
                    color=freq_0_20['frequency'], size=freq_0_20['frequency'],
                    symbol=freq_0_20['batter'], opacity=0.8)

fig.update_layout(title='Batter-Bowler No.of dot balls',
                  scene=dict(xaxis=dict(title='Batter'),
                             yaxis=dict(title='Bowler'),
                             zaxis=dict(title='Frequency')))
fig.show()

final_data.co

final_data.head()

data_match = pd.read_csv("IPL_Matches_Result_2008_2022.csv")
data_ball = pd.read_csv("IPL_Ball_by_Ball_2008_2022.csv")
final_data = pd.merge(data_match, data_ball, on = "ID", how = "inner")
final_data.drop(["Umpire1","Umpire2"],axis = 1,inplace = True)
final_data.drop(["SuperOver","WonBy","Margin","method","Player_of_Match","non-striker","extra_type","non_boundary","isWicketDelivery","player_out","kind","fielders_involved","City","Date","extras_run"],axis = 1,inplace = True)
stadiums_to_delete = ['Buffalo Park', 'Newlands','Dubai International Cricket Stadium', 'Sharjah Cricket Stadium','Zayed Cricket Stadium, Abu Dhabi','Sheikh Zayed Stadium','New Wanderers Stadium', 'SuperSport Park', 'Kingsmead','OUTsurance Oval', "St George's Park", 'De Beers Diamond Oval','Buffalo Park', 'Newlands','Green Park']
final_data = final_data[~final_data["Venue"].isin(stadiums_to_delete)]
venue_to_delete = ["Vidarbha Cricket Association Stadium, Jamtha","Nehru Stadium","Barabati Stadium","Sardar Patel Stadium, Motera","Subrata Roy Sahara Stadium","JSCA International Stadium Complex","Shaheed Veer Narayan Singh International Stadium","Saurashtra Cricket Association Stadium","Holkar Cricket Stadium","Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium"]
final_data = final_data.drop(final_data.index[final_data["Venue"].isin(venue_to_delete)])
final_data.replace({"Feroz Shah Kotla":"Arun Jaitley Stadium"},inplace = True)
final_data.replace({"Arun Jaitley Stadium, Delhi":"Arun Jaitley Stadium","Arun Jaitley Stadium, Delhi":"Arun Jaitley Stadium"},inplace = True)
final_data.replace({"MA Chidambaram Stadium, Chepauk, Chennai":"MA Chidambaram Stadium","MA Chidambaram Stadium, Chepauk":"MA Chidambaram Stadium"},inplace = True)
final_data.replace({"Rajiv Gandhi International Stadium, Uppal":"Rajiv Gandhi International Stadium"},inplace=True)
final_data.replace({"Punjab Cricket Association Stadium, Mohali":"Punjab Cricket Association IS Bindra Stadium","Punjab Cricket Association IS Bindra Stadium, Mohali":"Punjab Cricket Association IS Bindra Stadium"},inplace = True)
final_data.replace({"Narendra Modi Stadium, Ahmedabad":"Narendra Modi Stadium"},inplace = True)
final_data.replace({"M Chinnaswamy Stadium":"M.Chinnaswamy Stadium"},inplace = True)
final_data.replace({"Wankhede Stadium, Mumbai":"Wankhede Stadium"},inplace = True)
final_data.replace({"Dr DY Patil Sports Academy, Mumbai":"Dr DY Patil Sports Academy"},inplace = True)
final_data.replace({"Eden Gardens, Kolkata":"Eden Gardens"},inplace = True)
final_data.replace({"Brabourne Stadium, Mumbai":"Brabourne Stadium"},inplace = True)
final_data.replace({"Delhi Daredevils":"Delhi Capitals"},inplace =True)
final_data.replace({"Kings XI Punjab":"Punjab Kings"},inplace = True)
final_data.replace({"Deccan Chargers":"Sunrisers Hyderabad"},inplace = True)
teams_to_delete = ["Rising Pune Supergiants","Pune Warriors","Kochi Tuskers Kerala","Rising Pune Supergiant"]
final_data = final_data[~final_data["Team1"].isin(teams_to_delete)]
final_data = final_data[~final_data["Team2"].isin(teams_to_delete)]
final_data.replace({"Gujarat Lions":"Gujarat Titans"},inplace = True)
final_data = final_data[final_data["overs"] < 6]
final_data = final_data[final_data["innings"] <= 2]
final_data = final_data[final_data["Season"] != "2009/10"]
final_data = final_data[final_data["Season"] != "2007/08"]
final_data.replace({"2020/21":"2021"},inplace = True)
final_data["Season"] = pd.to_numeric(final_data["Season"])
final_data = final_data[final_data["Season"] >= 2017]
runs = pd.DataFrame(final_data.groupby(["ID","BattingTeam"])["total_run"].sum().reset_index())
final_data = pd.merge(final_data,runs,on = ["ID","BattingTeam"])
final_data.rename(columns = {"total_run_x": "runs_per_ball","total_run_y":"total_runs"},inplace = True)
batsman_list = pd.DataFrame(final_data.groupby(["ID","BattingTeam"])["batter"].unique().reset_index())
#batsman_list["batter"] = batsman_list["batter"].values.to_list()
batsman_list["fall_of_wickets"] = batsman_list["batter"].apply(lambda x: (len(x) - 2))
final_data = pd.merge(final_data,batsman_list,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batter_x":"batter","batter_y":"batsman_list"},inplace = True)
record = final_data[final_data["batsman_run"] == 6]
six_count = pd.DataFrame(record.groupby(["ID","BattingTeam"])["batsman_run"].count().reset_index())
final_data = pd.merge(final_data,six_count,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batsman_run_x":"batsman_run","batsman_run_y":"six_count"},inplace = True)
record = final_data[final_data["batsman_run"] == 4]
four_count = pd.DataFrame(record.groupby(["ID","BattingTeam"])["batsman_run"].count().reset_index())
final_data = pd.merge(final_data,four_count,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batsman_run_x": "batsman_run","batsman_run_y":"four_count"},inplace = True)
final_data = final_data[(final_data["overs"] == 5) & (final_data["ballnumber"] >= 6)]

final_data.groupby("Venue")

toss_and_win_count = final_data[final_data['TossWinner'] == final_data['WinningTeam']].groupby('Venue').size().reset_index(name='count')
toss_and_win_count

final_data.shape

final_data = final_data[(final_data["overs"] == 5) & (final_data["ballnumber"] >= 6)]
final_data = final_data[final_data["overs"] < 6]
final_data = final_data[final_data["innings"] <= 2]

final_data = final_data[final_data["Season"] != "2009/10"]
final_data = final_data[final_data["Season"] != "2007/08"]
final_data.replace({"2020/21":"2021"},inplace = True)
#final_data = final_data[final_data["Season"] >= 2017]

final_data["Season"] = pd.to_numeric(final_data["Season"])
final_data = final_data[final_data["Season"] >= 2017]

final_data.columns.values

final_data["ballnumber"].dtype

final_data[final_data["ID"] == 1304114]

"""Loading Data"""

data_match = pd.read_csv("IPL_Matches_Result_2008_2022.csv")
data_ball = pd.read_csv("IPL_Ball_by_Ball_2008_2022.csv")

data_match.shape,data_ball.shape

data_match.head()

data_ball.head()

data_match.columns.values

data_ball.columns.values

"""Merging Two datas"""

final_data = pd.merge(data_match, data_ball, on = "ID", how = "inner" )

final_data.loc[[478]]

final_data.columns.values

"""Dropping columns"""

final_data.drop(["Umpire1","Umpire2"],axis = 1,inplace = True)

final_data.drop(["SuperOver","WinningTeam","WonBy","Margin","method","Player_of_Match","non-striker","extra_type","non_boundary","isWicketDelivery","player_out","kind","fielders_involved","City","Date","extras_run"],axis = 1,inplace = True)

final_data.columns.values

final_data.shape

"""**Venue**"""

final_data["Venue"].unique()

stadiums_to_delete = ['Buffalo Park', 'Newlands','Dubai International Cricket Stadium', 'Sharjah Cricket Stadium','Zayed Cricket Stadium, Abu Dhabi','Sheikh Zayed Stadium','New Wanderers Stadium', 'SuperSport Park', 'Kingsmead','OUTsurance Oval', "St George's Park", 'De Beers Diamond Oval','Buffalo Park', 'Newlands','Green Park']

final_data = final_data[~final_data["Venue"].isin(stadiums_to_delete)]

final_data.shape

venue_to_delete = ["Vidarbha Cricket Association Stadium, Jamtha","Nehru Stadium","Barabati Stadium","Sardar Patel Stadium, Motera","Subrata Roy Sahara Stadium","JSCA International Stadium Complex","Shaheed Veer Narayan Singh International Stadium","Saurashtra Cricket Association Stadium","Holkar Cricket Stadium","Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium"]

final_data = final_data.drop(final_data.index[final_data["Venue"].isin(venue_to_delete)])

# Correcting venue names
final_data.replace({"Feroz Shah Kotla":"Arun Jaitley Stadium"},inplace = True)
final_data.replace({"Arun Jaitley Stadium, Delhi":"Arun Jaitley Stadium","Arun Jaitley Stadium, Delhi":"Arun Jaitley Stadium"},inplace = True)
final_data.replace({"MA Chidambaram Stadium, Chepauk, Chennai":"MA Chidambaram Stadium","MA Chidambaram Stadium, Chepauk":"MA Chidambaram Stadium"},inplace = True)
final_data.replace({"Rajiv Gandhi International Stadium, Uppal":"Rajiv Gandhi International Stadium"},inplace=True)
final_data.replace({"Punjab Cricket Association Stadium, Mohali":"Punjab Cricket Association IS Bindra Stadium","Punjab Cricket Association IS Bindra Stadium, Mohali":"Punjab Cricket Association IS Bindra Stadium"},inplace = True)
final_data.replace({"Narendra Modi Stadium, Ahmedabad":"Narendra Modi Stadium"},inplace = True)
final_data.replace({"M Chinnaswamy Stadium":"M.Chinnaswamy Stadium"},inplace = True)
final_data.replace({"Wankhede Stadium, Mumbai":"Wankhede Stadium"},inplace = True)
final_data.replace({"Dr DY Patil Sports Academy, Mumbai":"Dr DY Patil Sports Academy"},inplace = True)
final_data.replace({"Eden Gardens, Kolkata":"Eden Gardens"},inplace = True)
final_data.replace({"Brabourne Stadium, Mumbai":"Brabourne Stadium"},inplace = True)

"""**Teams**"""

final_data.Team1.unique()

final_data.Team2.unique()

final_data.replace({"Delhi Daredevils":"Delhi Capitals"},inplace =True)
final_data.replace({"Kings XI Punjab":"Punjab Kings"},inplace = True)
final_data.replace({"Deccan Chargers":"Sunrisers Hyderabad"},inplace = True)

teams_to_delete = ["Rising Pune Supergiants","Pune Warriors","Kochi Tuskers Kerala","Rising Pune Supergiant"]
final_data = final_data[~final_data["Team1"].isin(teams_to_delete)]

final_data = final_data[~final_data["Team2"].isin(teams_to_delete)]

final_data.replace({"Gujarat Lions":"Gujarat Titans"},inplace = True)

final_data["Team1"].unique()

final_data.shape

final_data.isna().sum()

#train_data = train_data.drop(train_data.index[train_data["WeekendPurchase"].isna()])
#df = df[df.colC.notnull()]

final_data.columns.values

final_data.info()

final_data["extras_run"].unique()

final_data.iloc[:,15:25]

#data[""] = pd.to_numeric(data[""])
#data[""] = data.fillna(0).astype("int64")

final_data.shape

#Removing rows above over 6
final_data = final_data[final_data["overs"] < 6]
final_data = final_data[final_data["innings"] <= 2]
final_data = final_data[final_data["Season"] != "2009/10"]
final_data = final_data[final_data["Season"] != "2007/08"]
final_data.replace({"2020/21":"2021"},inplace = True)
final_data["Season"] = pd.to_numeric(final_data["Season"])
final_data = final_data[final_data["Season"] >= 2017]
runs = pd.DataFrame(final_data.groupby(["ID","BattingTeam"])["total_run"].sum().reset_index())
final_data = pd.merge(final_data,runs,on = ["ID","BattingTeam"])
final_data.rename(columns = {"total_run_x": "runs_per_ball","total_run_y":"total_runs"},inplace = True)
batsman_list = pd.DataFrame(final_data.groupby(["ID","BattingTeam"])["batter"].unique().reset_index())
#batsman_list["batter"] = batsman_list["batter"].values.to_list()
batsman_list["fall_of_wickets"] = batsman_list["batter"].apply(lambda x: (len(x) - 2))
final_data.shape

final_data = final_data[final_data["innings"] <= 2]
final_data.shape

final_data["Season"].unique()

final_data = final_data[final_data["Season"] != "2009/10"]
final_data = final_data[final_data["Season"] != "2007/08"]
final_data.replace({"2020/21":"2021"},inplace = True)

final_data["Season"].unique()

#removing matches before 2018
final_data["Season"] = pd.to_numeric(final_data["Season"])
final_data = final_data[final_data["Season"] >= 2017]

final_data.shape

numeric_variables = ["ID","Margin","innings","overs","ballnumber","batsman_run","extras_run","total_run","non_boundary","isWicketDelivery"]
final_data[numeric_variables].hist(figsize=(12,6))
plt.show()

final_data.columns.values

"""**Construction of Total Runs Feature**"""

runs = pd.DataFrame(final_data.groupby(["ID","BattingTeam"])["total_run"].sum().reset_index())
final_data = pd.merge(final_data,runs,on = ["ID","BattingTeam"])
final_data.rename(columns = {"total_run_x": "runs_per_ball","total_run_y":"total_runs"},inplace = True)

final_data.head()

final_data.head()

final_data.columns.values

final_data.groupby("Venue")["total_runs"].mean()

final_data.info()

final_data["ballnumber"].unique()

final_data["overs"].unique()

final_data.shape

final_data.columns.values



batsman_list = pd.DataFrame(final_data.groupby(["ID","BattingTeam"])["batter"].unique().reset_index())
#batsman_list["batter"] = batsman_list["batter"].values.to_list()
batsman_list["fall_of_wickets"] = batsman_list["batter"].apply(lambda x: (len(x) - 2))

final_data = pd.merge(final_data,batsman_list,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batter_x":"batter","batter_y":"batsman_list"},inplace = True)
record = final_data[final_data["batsman_run"] == 6]
six_count = pd.DataFrame(record.groupby(["ID","BattingTeam"])["batsman_run"].count().reset_index())
final_data = pd.merge(final_data,six_count,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batsman_run_x":"batsman_run","batsman_run_y":"six_count"},inplace = True)

#final_data.rename(columns = {"batter_x":"batter","batter_y":"batsman_list"},inplace = True)

final_data.rename(columns = {"batter_x":"batter","batter_y":"batsman_list"},inplace = True)

final_data.columns.values

final_data.shape

"""**Count of 6**"""

record = final_data[final_data["batsman_run"] == 6]
six_count = pd.DataFrame(record.groupby(["ID","BattingTeam"])["batsman_run"].count().reset_index())
final_data = pd.merge(final_data,six_count,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batsman_run_x":"batsman_run","batsman_run_y":"six_count"},inplace = True)

final_data.rename(columns = {"batsman_run_x":"batsman_run","batsman_run_y":"six_count"},inplace = True)

six_count.head()

final_data.columns.values

record = final_data[final_data["batsman_run"] == 4]
four_count = pd.DataFrame(record.groupby(["ID","BattingTeam"])["batsman_run"].count().reset_index())
final_data = pd.merge(final_data,four_count,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batsman_run_x": "batsman_run","batsman_run_y":"four_count"},inplace = True)
final_data = final_data[(final_data["overs"] == 5) & (final_data["ballnumber"] >= 6)]



final_data = final_data[(final_data["overs"] == 5) & (final_data["ballnumber"] >= 6)]
final_data.shape

final_data[["ID","overs","ballnumber","fall_of_wickets","total_runs","BattingTeam"]].head(20)

final_data.loc[[478]]

final_data.columns

final_data.shape

data_match = pd.read_csv("IPL_Matches_Result_2008_2022.csv")
data_ball = pd.read_csv("IPL_Ball_by_Ball_2008_2022.csv")
final_data = pd.merge(data_match, data_ball, on = "ID", how = "inner")
final_data.drop(["Umpire1","Umpire2"],axis = 1,inplace = True)
final_data.drop(["SuperOver","WinningTeam","WonBy","Margin","method","Player_of_Match","non-striker","extra_type","non_boundary","isWicketDelivery","player_out","kind","fielders_involved","City","Date","extras_run"],axis = 1,inplace = True)
stadiums_to_delete = ['Buffalo Park', 'Newlands','Dubai International Cricket Stadium', 'Sharjah Cricket Stadium','Zayed Cricket Stadium, Abu Dhabi','Sheikh Zayed Stadium','New Wanderers Stadium', 'SuperSport Park', 'Kingsmead','OUTsurance Oval', "St George's Park", 'De Beers Diamond Oval','Buffalo Park', 'Newlands','Green Park']
final_data = final_data[~final_data["Venue"].isin(stadiums_to_delete)]
venue_to_delete = ["Vidarbha Cricket Association Stadium, Jamtha","Nehru Stadium","Barabati Stadium","Sardar Patel Stadium, Motera","Subrata Roy Sahara Stadium","JSCA International Stadium Complex","Shaheed Veer Narayan Singh International Stadium","Saurashtra Cricket Association Stadium","Holkar Cricket Stadium","Dr. Y.S. Rajasekhara Reddy ACA-VDCA Cricket Stadium"]
final_data = final_data.drop(final_data.index[final_data["Venue"].isin(venue_to_delete)])
final_data.replace({"Feroz Shah Kotla":"Arun Jaitley Stadium"},inplace = True)
final_data.replace({"Arun Jaitley Stadium, Delhi":"Arun Jaitley Stadium","Arun Jaitley Stadium, Delhi":"Arun Jaitley Stadium"},inplace = True)
final_data.replace({"MA Chidambaram Stadium, Chepauk, Chennai":"MA Chidambaram Stadium","MA Chidambaram Stadium, Chepauk":"MA Chidambaram Stadium"},inplace = True)
final_data.replace({"Rajiv Gandhi International Stadium, Uppal":"Rajiv Gandhi International Stadium"},inplace=True)
final_data.replace({"Punjab Cricket Association Stadium, Mohali":"Punjab Cricket Association IS Bindra Stadium","Punjab Cricket Association IS Bindra Stadium, Mohali":"Punjab Cricket Association IS Bindra Stadium"},inplace = True)
final_data.replace({"Narendra Modi Stadium, Ahmedabad":"Narendra Modi Stadium"},inplace = True)
final_data.replace({"M Chinnaswamy Stadium":"M.Chinnaswamy Stadium"},inplace = True)
final_data.replace({"Wankhede Stadium, Mumbai":"Wankhede Stadium"},inplace = True)
final_data.replace({"Dr DY Patil Sports Academy, Mumbai":"Dr DY Patil Sports Academy"},inplace = True)
final_data.replace({"Eden Gardens, Kolkata":"Eden Gardens"},inplace = True)
final_data.replace({"Brabourne Stadium, Mumbai":"Brabourne Stadium"},inplace = True)
final_data.replace({"Delhi Daredevils":"Delhi Capitals"},inplace =True)
final_data.replace({"Kings XI Punjab":"Punjab Kings"},inplace = True)
final_data.replace({"Deccan Chargers":"Sunrisers Hyderabad"},inplace = True)
teams_to_delete = ["Rising Pune Supergiants","Pune Warriors","Kochi Tuskers Kerala","Rising Pune Supergiant"]
final_data = final_data[~final_data["Team1"].isin(teams_to_delete)]
final_data = final_data[~final_data["Team2"].isin(teams_to_delete)]
final_data.replace({"Gujarat Lions":"Gujarat Titans"},inplace = True)
final_data = final_data[final_data["overs"] < 6]
final_data = final_data[final_data["innings"] <= 2]
final_data = final_data[final_data["Season"] != "2009/10"]
final_data = final_data[final_data["Season"] != "2007/08"]
final_data.replace({"2020/21":"2021"},inplace = True)
final_data["Season"] = pd.to_numeric(final_data["Season"])
final_data = final_data[final_data["Season"] >= 2017]
runs = pd.DataFrame(final_data.groupby(["ID","BattingTeam"])["total_run"].sum().reset_index())
final_data = pd.merge(final_data,runs,on = ["ID","BattingTeam"])
final_data.rename(columns = {"total_run_x": "runs_per_ball","total_run_y":"total_runs"},inplace = True)
batsman_list = pd.DataFrame(final_data.groupby(["ID","BattingTeam"])["batter"].unique().reset_index())
#batsman_list["batter"] = batsman_list["batter"].values.to_list()
batsman_list["fall_of_wickets"] = batsman_list["batter"].apply(lambda x: (len(x) - 2))
final_data = pd.merge(final_data,batsman_list,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batter_x":"batter","batter_y":"batsman_list"},inplace = True)
record = final_data[final_data["batsman_run"] == 6]
six_count = pd.DataFrame(record.groupby(["ID","BattingTeam"])["batsman_run"].count().reset_index())
final_data = pd.merge(final_data,six_count,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batsman_run_x":"batsman_run","batsman_run_y":"six_count"},inplace = True)
record = final_data[final_data["batsman_run"] == 4]
four_count = pd.DataFrame(record.groupby(["ID","BattingTeam"])["batsman_run"].count().reset_index())
final_data = pd.merge(final_data,four_count,on = ["ID","BattingTeam"])
final_data.rename(columns = {"batsman_run_x": "batsman_run","batsman_run_y":"four_count"},inplace = True)
final_data = final_data[(final_data["overs"] == 5) & (final_data["ballnumber"] >= 6)]

final_data.columns

final_data = final_data[["Team1","Team2","Venue","TossWinner","TossDecision","BattingTeam","innings","batsman_run","total_runs","six_count","four_count"]]

final_data.drop_duplicates(['ID','BattingTeam','overs'],keep='last',inplace=True)

final_data.shape

categorical_features = ["Team1","Team2","Venue","TossWinner","TossDecision","BattingTeam"]
numerical_features = ["innings","batsman_run","total_runs","six_count","four_count"]

#final_data['venue_avg']=final_data['venue'].map(final_data.groupby('venue')['Total_Runs'].mean()).astype(int)

final_data["Venue"].unique()

venue_=dict(final_data.groupby('Venue')['total_runs'].mean().round(1))

venue_keep= ['Narendra Modi Stadium', 'Eden Gardens', 'Wankhede Stadium','Brabourne Stadium', 'Dr DY Patil Sports Academy','Maharashtra Cricket Association Stadium, Pune','Arun Jaitley Stadium', 'MA Chidambaram Stadium','Rajiv Gandhi International Stadium','Punjab Cricket Association IS Bindra Stadium','M.Chinnaswamy Stadium', 'Sawai Mansingh Stadium','Maharashtra Cricket Association Stadium']
venue_info={key:val for key,val in venue_.items() if key in venue_keep}

final_data.columns

#batsman who can't hit six

final_data.head()

final_data["TossWinner"].value_counts()

final_data.groupby("BattingTeam")["six_count"].mean()

plt.figure(figsize=[18,17])
plt.subplot(431)
Delhi_six = final_data[final_data["BattingTeam"] == "Delhi Capitals"]["six_count"].value_counts()
plt.bar(Delhi_six.index,Delhi_six.values)
plt.title('Powerplay Six Count')
plt.xlabel('Delhi Capitals')
plt.ylabel('Count of Six')

plt.subplot(432)
chennai_six = final_data[final_data["BattingTeam"] == "Chennai Super Kings"]["six_count"].value_counts()
plt.bar(chennai_six.index,chennai_six.values)
plt.title('Powerplay Six Count')
plt.xlabel('Chennai Super Kings')
plt.ylabel('Count of Six')

plt.subplot(433)
Gujarat_six = final_data[final_data["BattingTeam"] == "Gujarat Titans"]["six_count"].value_counts()
plt.bar(Gujarat_six.index,Gujarat_six.values)
plt.title('Powerplay Six Count')
plt.xlabel('Gujarat Titans')
plt.ylabel('Count of Six')

plt.subplot(434)
kolkata_six = final_data[final_data["BattingTeam"] == "Kolkata Knight Riders"]["six_count"].value_counts()
plt.bar(kolkata_six.index,kolkata_six.values)
plt.xlabel('Kolkata Knight Riders')
plt.ylabel('Count of Six')

plt.subplot(435)
lucknow_six = final_data[final_data["BattingTeam"] == "Lucknow Super Giants"]["six_count"].value_counts()
plt.bar(lucknow_six.index,lucknow_six.values)
plt.xlabel('Lucknow Super Giants')
plt.ylabel('Count of Six')

plt.subplot(436)
mumbai_six = final_data[final_data["BattingTeam"] == "Mumbai Indians"]["six_count"].value_counts()
plt.bar(mumbai_six.index,mumbai_six.values)
plt.xlabel('Mumbai Indians')
plt.ylabel('Count of Six')

plt.subplot(437)
punjab_six = final_data[final_data["BattingTeam"] == "Punjab Kings"]["six_count"].value_counts()
plt.bar(punjab_six.index,punjab_six.values)
plt.xlabel('Punjab Kings')
plt.ylabel('Count of Six')

plt.subplot(438)
rajasthan_six = final_data[final_data["BattingTeam"] == "Rajasthan Royals"]["six_count"].value_counts()
plt.bar(rajasthan_six.index,rajasthan_six.values)
plt.xlabel('Rajasthan Royals')
plt.ylabel('Count of Six')

plt.subplot(439)
bangalore_six = final_data[final_data["BattingTeam"] == "Royal Challengers Bangalore"]["six_count"].value_counts()
plt.bar(bangalore_six.index,bangalore_six.values)
plt.xlabel('Royal Challengers Bangalore')
plt.ylabel('Count of Six')

plt.subplot(4310)
hyd_six = final_data[final_data["BattingTeam"] == "Sunrisers Hyderabad"]["six_count"].value_counts()
plt.bar(hyd_six.index,hyd_six.values)
plt.xlabel('Sunrisers Hyderabad')
plt.ylabel('Count of Six')
plt.show()

